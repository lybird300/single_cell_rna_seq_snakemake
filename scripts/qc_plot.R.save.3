library(Seurat)

## Read merged data and extract metadata
merged_seurat <- readRDS(snakemake@input[[1]])
metadata <- merged_seurat@meta.data

## If needed, Change orig.ident to sample ID
metadata$orig.ident <- sapply(rownames(metadata),function(x){
	unlist(strsplit(x,"_"))[1]
})


## Add number of genes per UMI for each cell to metadata
metadata$log10GenesPerUMI <- log10(metadata$nFeature_RNA) / log10(metadata$nCount_RNA)

## Compute the mitochodrial transcript percentage for each cell
## The PercentageFeatureSet() will take a pattern and search the gene identifiers.
## For each column (cell) it will take the sum of the counts slot for features belonging to the set, divide by the column sum for all features and multiply by 100.
merged_seurat$mitoCountRatio <- PercentageFeatureSet(object = merged_seurat, pattern = "^MT-")/100

## Compute the ribosomal transcript percentage for each cell
merged_seurat$riboCountRatio <- PercentageFeatureSet(object = merged_seurat, pattern = "^RP[SL][[:digit:]]")/100


## If needed, Change orig.ident to sample ID
merged_seurat$orig.ident <- sapply(rownames(merged_seurat@metadata),function(x){
        unlist(strsplit(x,"_"))[1]
})


# Save the Seurat object with changed metadata
saveRDS(merged_seurat,file=snakemake@input[[1]])

############
## Use Seurat functions

# Visualize QC metrics as a violin plot
jpeg(sprintf("%s/%s_VlnPlot_mito_ribo_perc.jpg", snakemake@output[[1]], snakemake@params[[1]]), width = 15, height = 5, units="in", res=300)
vln <- VlnPlot(object = merged_seurat, features = c("mitoCountRatio", "riboCountRatio"), pt.size=0, ncol = 2, group.by="orig.ident")
print(vln)
dev.off()

jpeg(sprintf("%s/%s_VlnPlot_nCount_5Kmax.jpg", snakemake@output[[1]], snakemake@params[[1]]), width = 10, height = 5, units="in", res=300)
vln <- VlnPlot(object = merged_seurat, features = "nCount_RNA", pt.size=0, group.by="orig.ident", y.max=50000) + theme(lengend.position="none")
print(vln)
dev.off()

jpeg(sprintf("%s/%s_VlnPlot.nFeature.jpg", snakemake@output[[1]], snakemake@params[[1]]), width = 10, height = 5, units="in", res=300)
vln <- VlnPlot(object = merged_seurat, features = "nFeature_RNA", pt.size=0, group.by="orig.ident") + theme(legend.position="none")
print(vln)
dev.off()


# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.

jpeg(sprintf("%s/%s_Scatter_nCount_mitoRatio.jpg", snakemake@output[[1]], snakemake@params[[1]]), width = 8, height = 6, units="in", res=300)
scatter <- FeatureScatter(object = merged_seurat, feature1 = "nCount_RNA", feature2 = "mitoCountRatio", pt.size=0.1) + theme(legend.position="none")
print(scatter)
dev.off()

jpeg(sprintf("%s/%s_Scatter_nCount_riboRatio.jpg", snakemake@output[[1]], snakemake@params[[1]]), width = 8, height = 6, units="in", res=300)
scatter <- FeatureScatter(object = merged_seurat, feature1 = "nCount_RNA", feature2 = "riboCountRatio", pt.size=0.1) + theme(legend.position="none")
print(scatter)
dev.off()

jpeg(sprintf("%s/%s_Scatter_nCount_nFeature.jpg", snakemake@output[[1]], snakemake@params[[1]]), width = 8, height = 6, units="in", res=300)
scatter <- FeatureScatter(object = scrna, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", pt.size=0.1) + theme(legend.position="none")
print(scatter)
dev.off()

###########################
## Use scater functions

library(scater)
sce=as.SingleCellExperiment(merged_seurat)
is.mito <- grepl("^MT-",rownames(sce))
df <- perCellQCMetrics(sce, subsets=list(Mito=is.mito))
batch.reasons <- quickPerCellQC(df,percent_subsets=c("subsets_Mito_percent"),batch=sce$orig.ident)
colData(sce) <- cbind(colData(sce),df)
sce$discard <- batch.reasons$discard

jpeg(sprintf("%s/%s_scater_outlier_nCount.jpg", snakemake@output[[1]], snakemake@params[[1]]), width = 8, height = 6, units="in", res=300)
p=plotColData(sce, x="orig.ident", y="sum", colour_by="discard") + scale_y_log10() + ggtitle("Total count per cell")
print(p)
dev.off()

jpeg(sprintf("%s/%s_scater_outlier_nFeature.jpg", snakemake@output[[1]], snakemake@params[[1]]), width = 8, height = 6, units="in", res=300)
p=plotColData(sce, x="orig.ident", y="detected", colour_by="discard") + scale_y_log10() + ggtitle("Number of expressed genes per cell")
print(p)
dev.off()

jpeg(sprintf("%s/%s_scater_outlier_mitoPerc.jpg", snakemake@output[[1]], snakemake@params[[1]]), width = 8, height = 6, units="in", res=300)
p=plotColData(sce, x="orig.ident", y="subsets_Mito_percent", colour_by="discard") + ggtitle("Mito percent")
print(p)
dev.off()


jpeg(sprintf("%s/%s_scater_outlier_nCount_mitoPerc.jpg", snakemake@output[[1]], snakemake@params[[1]]), width = 8, height = 6, units="in", res=300)
p=plotColData(sce, x="sum", y="subsets_Mito_percent", colour_by="discard")
print(p)
dev.off()


